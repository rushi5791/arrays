#########################################################
1.Input the number of elements of the array.
2.Input the elements of the array (At most steps at each step).
3Assign max_level = arr[0], step = arr[0] and jump = 1.
4.if(arr[0] == )
5.jump = -1
6.else
7.Repeat from i = 1 to n - 1
8.maxLevel = max(maxLevel,i+a[i]);
9.step--;
10.if(step == 0)
11.jump++;
12.if(i>= maxLevel)
13.jump=-1;
14.break;
15.step=maxLevel-i;
17.Return jump.

#include<bits/stdc++.h>
#include<vector>
using namespace std;
int jumps(vector<int> &A)
{
	if(A.size()<=1)
    	return 0;
	if(A[0]==0)
    	return -1;
	int n = A.size();
	int jumps = 1;
	int reachable = 0;
	int curr = A[0];
	for(int i=1;i<n;i++)
	{
    	reachable = max(reachable, i+A[i]);
    	if(curr==i && i!=n-1)
    	{
        	jumps++;
        	curr = reachable;
        	reachable = -1;
    	}
    	if(curr==i && i!=n-1)
        	return -1;	
	}	
	return jumps;
}
int main()
{
	int n;
	vector<int> A;
	cin>>n;
	for(int i = 0;i<n;i++)
	{
		int v;
		cin>>v;
		A.push_back(v);
	}
	cout<<jumps(A);
}




########################################################
// C++ program to count Minimum number 
// of jumps to reach end 
#include <bits/stdc++.h> 
using namespace std; 

int max(int x, int y) 
{ 
	return (x > y) ? x : y; 
} 

// Returns minimum number of jumps 
// to reach arr[n-1] from arr[0] 
int minJumps(int arr[], int n) 
{ 

	// The number of jumps needed to 
	// reach the starting index is 0 
	if (n <= 1) 
		return 0; 

	// Return -1 if not possible to jump 
	if (arr[0] == 0) 
		return -1; 

	// initialization 
	// stores all time the maximal 
	// reachable index in the array. 
	int maxReach = arr[0]; 

	// stores the number of steps 
	// we can still take 
	int step = arr[0]; 

	// stores the number of jumps 
	// necessary to reach that maximal 
	// reachable position. 
	int jump = 1; 

	// Start traversing array 
	int i = 1; 
	for (i = 1; i < n; i++) { 
		// Check if we have reached the end of the array 
		if (i == n - 1) 
			return jump; 

		// updating maxReach 
		maxReach = max(maxReach, i + arr[i]); 

		// we use a step to get to the current index 
		step--; 

		// If no further steps left 
		if (step == 0) { 
			// we must have used a jump 
			jump++; 

			// Check if the current index/position or lesser index 
			// is the maximum reach point from the previous indexes 
			if (i >= maxReach) 
				return -1; 

			// re-initialize the steps to the amount 
			// of steps to reach maxReach from position i. 
			step = maxReach - i; 
		} 
	} 

	return -1; 
} 

// Driver program to test above function 
int main() 
{ 
	int arr[] = { 1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9 }; 
	int size = sizeof(arr) / sizeof(int); 

	// Calling the minJumps function 
	cout << ("Minimum number of jumps to reach end is %d ", 
			minJumps(arr, size)); 
	return 0; 
} 


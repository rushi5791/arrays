// Simple C++ program to find k'th smallest element 
#include <algorithm> 
#include <iostream> 
using namespace std; 

// Function to return k'th smallest element in a given array 
int kthSmallest(int arr[], int n, int k) 
{ 
	// Sort the given array 
	sort(arr, arr + n); 

	// Return k'th element in the sorted array 
	return arr[k - 1]; 
} 

// Driver program to test above methods 
int main() 
{ 
	int arr[] = { 12, 3, 5, 7, 19 }; 
	int n = sizeof(arr) / sizeof(arr[0]), k = 2; 
	cout << "K'th smallest element is " << kthSmallest(arr, n, k); 
	return 0; 
} 



SIMILLAR FOR LARGEST NUMBER


#######################################################

USING QUICK SORT@@@@@@@@@@@@@@@@@





#include <iostream>
#include <algorithm>
using namespace std;

// Partition using Lomuto partition scheme
int Partition(int a[], int start, int end)
{
	// Pick rightmost element as pivot from the array
	int pivot = a[end];

	// elements less than pivot will be pushed to the left of pIndex
	// elements more than pivot will be pushed to the right of pIndex
	// equal elements can go either way
	int pIndex = start;

	// each time we finds an element less than or equal to pivot, pIndex
	// is incremented and that element would be placed before the pivot.
	for (int i = start; i < end; i++)
	{
		if (a[i] <= pivot)
		{
			swap(a[i], a[pIndex]);
			pIndex++;
		}
	}
	// swap pIndex with Pivot
	swap (a[pIndex], a[end]);

	// return pIndex (index of pivot element)
	return pIndex;
}

// QuickSort routine
void quicksort(int a[] ,int start, int end)
{
	// base condition
	if (start >= end)
		return;

	// rearrange the elements across pivot
	int pivot = Partition(a, start, end);

	// recur on sub-array containing elements that are less than pivot
	quicksort(a, start, pivot - 1);

	// recur on sub-array containing elements that are more than pivot
	quicksort(a, pivot + 1, end);
}

// C++ implementation of quicksort algorithm
int main()
{
	int a[] = { 9, -3, 5, 2, 6, 8, -6, 1, 3 };
	int n = sizeof(a)/sizeof(a[0]);
  int k;
  cin>>k;
	quicksort(a, 0, n - 1);

	// print the sorted array
	for (int i = 0 ; i < n; i++)
		cout << a[i] << " ";
// for smallest number
 for (int i=0;i<n;i++)
 { 
   if(i==k-1)
   cout<<a[i];
   }
   // for largest number
 for (int i=0;i<n;i++)
 { 
   if(i==k-1)
   cout<<a[i];
   }
	return 0;
}
